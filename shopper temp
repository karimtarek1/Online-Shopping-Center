int RegOwner(string name, char Password[], int passnum, int age, string gender, string country, string city)
{
	int  j;
	for (j = 0; j < maxOwners; j++)
	{
		if (Owners[j].Age == 0)
		{
			Owners[j].Name = name;
			for (int i = 0; i < maxPass; i++) {
				Owners[j].Password[i] = Password[i];
			}
			Owners[j].Age = age;
			Owners[j].Gender = gender;
			Owners[j].Add.Country = country;
			Owners[j].Add.City = city;
			s.countOwn++;
			break;
		}
	}
	return j;
}
int Regshopper(string name, char Password[], int passnum, int age, string gender, string country, string city) {
	int  j;
	for (j = 0; j < maxOwners; j++)
	{
		if (Shoppers[j].age == 0)
		{
			Shoppers[j].name = name;
			for (int i = 0; i < maxPass; i++) {
				Owners[j].Password[i] = Password[i];
			}
			Shoppers[j].age = age;
			Shoppers[j].gender = gender;
			Shoppers[j].Add.Country = country;
			Shoppers[j].Add.City = city;
			s.countOwn++;
			
			break;
		}
	}
	return j;
}
int Lowner(int id, char pass[],int j, sf::RenderWindow& window, sf::RectangleShape photo)
{
	int i;
	bool flag = true;
	int LogID;
	char LogPass[maxPass];

	LogID = id;
	for (i = 0; i < Owners[i].PassNum; i++) {
		LogPass[i] = pass[i];
	}



	for (i = 0; i < maxOwners; i++)
	{
		flag = true;
		if (j > Owners[i].PassNum || j < Owners[i].PassNum) {
			flag = false;
		}
		else if (j == Owners[i].PassNum) {
			for (int x = 0; x < Owners[i].PassNum; x++)
			{
				if (LogPass[x] != Owners[i].Password[x])
				{
					flag = false;
				}
			}
		}
		if (LogID == Owners[i].ID && (flag))
		{

			
			break;
		}

	}
	if (flag == false)
	{
		loginowner(window, photo);
		i = maxOwners;
	}
	return i;
}
int Lshopper(int id, char pass[],int j, sf::RenderWindow& window, sf::RectangleShape photo)
{
	int i;
	bool flag = true;
	int LogID;
	char LogPass[maxPass];

	LogID = id;
	for (i = 0; i < Shoppers[i].passnum; i++) {
		LogPass[i] = pass[i];
	}



	for (i = 0; i < maxShoppers; i++)
	{
		flag = true;
		if (j > Shoppers[i].passnum || j <Shoppers[i].passnum) {
			flag = false;
		}
		else if (j == Shoppers[i].passnum) {
			for (int x = 0; x < Shoppers[i].passnum; x++)
			{
				if (LogPass[x] != Shoppers[i].pass[x])
				{
					flag = false;
				}
			}
		}
		if (LogID == Shoppers[i].id && (flag))
		{

			
			break;
		}

	}
	if (flag == false)
	{

		i = maxShoppers;
	}
	return i;
}
void del(int j) {

	Shoppers[j].name = { 0 };
	Shoppers[j].id = 0;
	for (int i = 0; i < maxPass; i++) {
		Shoppers[j].pass[i] = { 0 };
	}
	Shoppers[j].passnum = 0;
	Shoppers[j].purchases = 0;
	Shoppers[j].age = 0;
	for (int i = 0; i < 10; i++) {

		Shoppers[j].months[i] = 0;
		Shoppers[j].days[i] = 0;
		Shoppers[j].purchaseHistory[i] = 0;
	}
	Shoppers[j].gender = { 0 };
	Shoppers[j].Add.City = { 0 };
	Shoppers[j].Add.Country = { 0 };
	s.countShopper--;



	deletes = 0;
}
void gifts() {
	do {
		int choice1;
		char choice2;
		
		if (choice1 == 1) {
			
			for (int i = 0; i < maxOwners; i++) {
				for (int j = 0; j < maxProds; j++){
					if (Owners[i].Shops.products[j].productPrice != 0) {
						
						if (Owners[i].Shops.products[j].Category == "Clothing") {
							if (Owners[i].Shops.products[j].Clothes.Type == 'm') {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << "  \t  " << Owners[i].Shops.products[j].Clothes.Size << "  \t  " << Owners[i].Shops.products[j].Clothes.Type << "   \t  " << Owners[i].Shops.products[j].Clothes.Color << endl;

							}
						}
						else {
							if (Owners[i].Shops.products[j].Category != "Makeup&Acessories") {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << endl;
							}
						}
					}

				}
			}
		}
		else if (choice1 == 2) {
			for (int i = 0; i < maxOwners; i++) {
				for (int j = 0; j < maxProds; j++) {
					if (Owners[i].ID != 0) {
						if (Owners[i].Shops.products[j].Category == "Clothing") {
							if (Owners[i].Shops.products[j].Clothes.Type == 'f') {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << "  \t  " << Owners[i].Shops.products[j].Clothes.Type << "   \t  " << Owners[i].Shops.products[j].Clothes.Size << "  \t  " << Owners[i].Shops.products[j].Clothes.Color << endl;

							}
						}
						else {
							cout << Owners[j].Shops.products[i].productName << "  \t  " << Owners[j].Shops.products[i].productPrice << "$" << "   \t  " << Owners[j].Shops.products[i].Category << "  \t " << Owners[j].Shops.products[i].Quantity << endl << endl;
						}
					}
				}
			}
		}
		else
		if (choice2 == 'y' || choice1 == 'Y')
		{
			continue;
		}
		else if (choice2 == 'n' || choice2 == 'N')
		{
			break;
		}
	} while (true);
}

void gifts() {
	do {
		int choice1;
		char choice2;
		
		if (choice1 == 1) {
			
			for (int i = 0; i < maxOwners; i++) {
				for (int j = 0; j < maxProds; j++){
					if (Owners[i].Shops.products[j].productPrice != 0) {
						
						if (Owners[i].Shops.products[j].Category == "Clothing") {
							if (Owners[i].Shops.products[j].Clothes.Type == 'm') {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << "  \t  " << Owners[i].Shops.products[j].Clothes.Size << "  \t  " << Owners[i].Shops.products[j].Clothes.Type << "   \t  " << Owners[i].Shops.products[j].Clothes.Color << endl;

							}
						}
						else {
							if (Owners[i].Shops.products[j].Category != "Makeup&Acessories") {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << endl;
							}
						}
					}

				}
			}
		}
		else if (choice1 == 2) {
			for (int i = 0; i < maxOwners; i++) {
				for (int j = 0; j < maxProds; j++) {
					if (Owners[i].ID != 0) {
						if (Owners[i].Shops.products[j].Category == "Clothing") {
							if (Owners[i].Shops.products[j].Clothes.Type == 'f') {
								cout << Owners[i].Shops.products[j].productName << "  \t  " << Owners[i].Shops.products[j].productPrice << "$" << "   \t  " << Owners[i].Shops.products[j].Category << "  \t " << Owners[i].Shops.products[j].Quantity << "  \t  " << Owners[i].Shops.products[j].Clothes.Type << "   \t  " << Owners[i].Shops.products[j].Clothes.Size << "  \t  " << Owners[i].Shops.products[j].Clothes.Color << endl;

							}
						}
						else {
							cout << Owners[j].Shops.products[i].productName << "  \t  " << Owners[j].Shops.products[i].productPrice << "$" << "   \t  " << Owners[j].Shops.products[i].Category << "  \t " << Owners[j].Shops.products[i].Quantity << endl << endl;
						}
					}
				}
			}
		}
		else
		if (choice2 == 'y' || choice1 == 'Y')
		{
			continue;
		}
		else if (choice2 == 'n' || choice2 == 'N')
		{
			break;
		}
	} while (true);
}
